package day0514;
// 객체지향 프로그래밍의 5원칙
// 객체지향 프로그래밍에서는 5가지 원칙이 있는데 해당 원칙을 잘 지켜야 여러분들이 프로그래밍을 만들때 진정한 객체지향 프로그래밍을 한다고 할 수 있다.
// 하지만 여러분들이 전부 다 지키는 것은 훗날의 일이고 지금은 S를 잘 지키는 것을 목표로 해야한다.

// S: 단일 책임 원칙(Single Responsibility Principle)                                                 --> 클래스 하나에 하나의 기능
//    클래스는 한번에 한가지만 책임을 지어야 한다. 만약, 해당 클래스가 데이터를 필드화 시켜서 관리할거면 그것만 해야하고
//    화면 출력을 담당할거면 화면 출력만 담당을 해야 한다.

// O: 개방 폐쇄 원칙(Open - Closed Principle)                                                          --> 기능을 추가하는것에는 능동적으로 하지만 내부의 기능을 아예 변경하는건 지양
//    모든 클래스는 확장에는 열려 있고, 변경에는 닫혀 있어야 한다.
//    즉, 우리가 어떠한 기능을 추가할 떄에는 쉽지만, 내부의 변경이 다른 클래스에 영향을 미쳐선 안된다.

// L: 리스코프 대체 원칙(Liskov Substitution Principle)  -> 폴리몰피즘 다형성과 연관된 문제이다.        어떠한 클래스 또는 타입의 형태가 변형되더라도 연관된 다른 코딩에 영향을 끼쳐선 안된다.
//    모든 부모 클래스의 객체를 자식 클래스의 객체로 교체하더라도 프로그램에는 문제가 없어야 한다.

// I: 인터페이스 분리 원칙(Interface Segregation Principle)                                          독립성 비슷한듯
//    프로그램은, 자신이 사용하지 않는 메서드를 의존해선 안된다.
//    예시 프린트기능있는 메서드에 스캐너 기능을 추가했을때 이 스캐너 기능으로 인해 프린트 기능에 문제가 생기면 안된다는 경우

// D: 의존 역전 원칙(Dependency Inversion Principle)                                              I와 비슷
//    A 클래스가 B 클래스에 의존적이더라고 해도 A 클래스는 B 클래스의 메소드가 어떻게 작동하는지는 알 필요가 없다.
//    한개의 클래스가 수정 될때 다른 의존적인 클래스에서는 고칠 필요가 없도록 코딩을 짜야 한다
public class Ex05SOLID {

}


/* 숙제
 MVC 패턴이란?
 모델(Model)-뷰(View)-컨트롤러(Controller) 소프트웨어의 디자인 패턴중 하나로 모델-시각-컨트롤러 요소로 분리하여 설계하는 방법
 1. 모델
 어플리케이션의 데이터 및 코딩의 로직(알고리즘)을 담당하여 데이터의 변경과 관리를 맡는다.

 2. 뷰
 사용자의 인터페이스를 나타내며 데이터의 시각적 표현을 어떻게 할건지 정보를 어떻게 표시해 전달할 것인지

 3. 컨트롤러
 모델과 뷰 사이의 중간 매개체 역할로 사용자의 명령을 입력받아 데이터를 갱신하거나 명령을 산출하는 상호작용을 도와주는
 */